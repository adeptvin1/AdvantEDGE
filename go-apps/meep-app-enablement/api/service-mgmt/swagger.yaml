openapi: 3.0.2
servers:
  - url: 'https://localhost/sandboxname/mec_service_mgmt/v1'
info:
  title: AdvantEDGE MEC Service Management API
  version: 2.1.1
  description: "MEC Service Management Service is AdvantEDGE's implementation of
  [ETSI MEC ISG MEC011 Application Enablement API](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf)
  <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt)
  <p>**Micro-service**<br>[meep-app-enablement](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-app-enablement/server/service-mgmt)
  <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about services in the network
  <p>**Note**<br>AdvantEDGE supports all of Service Management API endpoints (see below)."
  license:
    name: Apache 2.0
    url: 'https://github.com/InterDigitalInc/AdvantEDGE/blob/master/LICENSE'
  contact:
    name: InterDigital AdvantEDGE Support
    email: AdvantEDGE@InterDigital.com
externalDocs:
  description: 'ETSI GS MEC011 Application Enablement API, V2.1.1'
  url: 'https://www.etsi.org/deliver/etsi_gs/MEC/001_099/011/02.01.01_60/gs_MEC011v020101p.pdf'
tags:
  - name: mec_service_mgmt
paths:
  '/services':
    get:
      description: >-
        This method retrieves information about a list of mecService resources.
        This method is typically used in "service availability query" procedure
      operationId: Services_GET
      tags:
        - mec_service_mgmt
      parameters:
        - $ref: '#/components/parameters/Query.SerInstanceId'
        - $ref: '#/components/parameters/Query.SerName'
        - $ref: '#/components/parameters/Query.SerCategoryId'
        - $ref: '#/components/parameters/Query.ConsumedLocalOnly'
        - $ref: '#/components/parameters/Query.IsLocal'
        - $ref: '#/components/parameters/Query.LocalityType' 
      responses:
        '200':
          $ref: '#/components/responses/Services200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '414':
          $ref: '#/components/responses/414'
  '/services/{serviceId}':
    parameters:
      - $ref: '#/components/parameters/Path.ServiceId'
    get:
      description: >-
        This method retrieves information about a mecService resource. This
        method is typically used in "service availability query" procedure
      operationId: ServicesServiceId_GET
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/ServicesServiceId200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/applications/{appInstanceId}/services':
    parameters:
      - $ref: '#/components/parameters/Path.AppInstanceId'
    get:
      description: >-
        This method retrieves information about a list of mecService resources.
        This method is typically used in "service availability query" procedure
      operationId: AppServices_GET
      tags:
        - mec_service_mgmt
      parameters:
        - $ref: '#/components/parameters/Query.SerInstanceId'
        - $ref: '#/components/parameters/Query.SerName'
        - $ref: '#/components/parameters/Query.SerCategoryId'
        - $ref: '#/components/parameters/Query.ConsumedLocalOnly'
        - $ref: '#/components/parameters/Query.IsLocal'
        - $ref: '#/components/parameters/Query.LocalityType' 
      responses:
        '200':
          $ref: '#/components/responses/Services200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '414':
          $ref: '#/components/responses/414'
    post:
      description: >-
        This method is used to create a mecService resource. This method is
        typically used in "service availability update and new service
        registration" procedure
      operationId: AppServices_POST
      tags:
        - mec_service_mgmt
      responses:
        '201':
          $ref: '#/components/responses/Services201'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        $ref: '#/components/requestBodies/ServicesPost'
  '/applications/{appInstanceId}/services/{serviceId}':
    parameters:
      - $ref: '#/components/parameters/Path.AppInstanceId'
      - $ref: '#/components/parameters/Path.ServiceId'
    get:
      description: >-
        This method retrieves information about a mecService resource. This
        method is typically used in "service availability query" procedure
      operationId: AppServicesServiceId_GET
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/ServicesServiceId200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    put:
      description: This method updates the information about a mecService resource
      operationId: AppServicesServiceId_PUT
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/ServicesServiceId200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
      requestBody:
        $ref: '#/components/requestBodies/ServicesServiceId'
    delete:
      description: >-
        This method deletes a mecService resource. This method is typically used in the service deregistration procedure. 
      operationId: AppServicesServiceId_DELETE
      tags:
        - mec_service_mgmt
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/applications/{appInstanceId}/subscriptions':
    parameters:
      - $ref: '#/components/parameters/Path.AppInstanceId'
    get:
      description: >-
        The GET method may be used to request information about all
        subscriptions for this requestor. Upon success, the response contains
        entity body with all the subscriptions for the requestor.
      operationId: ApplicationsSubscriptions_GET
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/ApplicationsSubscriptions200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      description: >-
        The POST method may be used to create a new subscription. One example
        use case is to create a new subscription to the MEC service
        availability notifications. Upon success, the response contains entity
        body describing the created subscription.
      operationId: ApplicationsSubscriptions_POST
      tags:
        - mec_service_mgmt
      responses:
        '201':
          $ref: '#/components/responses/ApplicationsSubscriptions201'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      requestBody:
        $ref: '#/components/requestBodies/ApplicationsSubscriptions'
      callbacks:
        serviceAvailabilityNotification:
          $ref: '#/components/callbacks/ServiceAvailabilityNotification'
  '/applications/{appInstanceId}/subscriptions/{subscriptionId}':
    parameters:
      - $ref: '#/components/parameters/Path.AppInstanceId'
      - $ref: '#/components/parameters/Path.SubscriptionId'
    get:
      description: >-
        The GET method requests information about a subscription for this
        requestor. Upon success, the response contains entity body with the
        subscription for the requestor.
      operationId: ApplicationsSubscription_GET
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/ApplicationsSubscription200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      description: >-
        This method deletes a mecSrvMgmtSubscription. This method is typically used
        in "Unsubscribing from service availability event notifications"
        procedure.
      operationId: ApplicationsSubscription_DELETE
      tags:
        - mec_service_mgmt
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/transports':
    get:
      description: >-
        This method retrieves information about a list of available transports.
        This method is typically used by a service-producing application to
        discover transports provided by the MEC platform in the
        "transport information query" procedure
      operationId: Transports_GET
      tags:
        - mec_service_mgmt
      responses:
        '200':
          $ref: '#/components/responses/Transports200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
components:
  schemas:
    CategoryRef:
      description: This type represents the category reference
      type: object
      required:
        - href
        - id
        - name
        - version
      properties:
        href:
          description: Reference of the catalogue
          type: string
          format: uri
        id:
          description: Unique identifier of the category
          type: string
        name:
          description: Name of the category, example values include RNI, Location & Bandwidth Management
          type: string
        version:
          description: Category version
          type: string
    CategoryRefs:
      description: Categories of services about which to report events.
      type: array
      minItems: 0
      items: 
        $ref: '#/components/schemas/CategoryRef'
    EndPointInfoAddresses:
      description: >-
        Entry point information of the service as one or more pairs of IP
        address and port
      type: object
      required:
        - addresses
      properties:
        addresses:
          type: array
          minItems: 0
          items:
            description: A IP address and port pair
            type: object
            required:
              - host
              - port
            properties:
              host:
                description: Host portion of the address
                type: string
              port:
                description: Port portion of the address
                type: integer
                format: uint32
    EndPointInfoAlternative:
      description: >-
        Entry point information of the service in a format defined by an
        implementation, or in an external specification.
      type: object
      required:
        - alternative
      properties: 
        alternative:
          type: object
    EndPointInfoUris:
      description: >-
        Entry point information of the service as string, formatted according to
        URI syntax
      type: object
      required:
        - uris
      properties:
        uris:
          type: array
          minItems: 0
          items:
            description: Entry point information of the service
            type: string
            format: uri
    LinkType:
      description: This type represents a type of link and may be referenced from data structures
      type: object
      properties:
        href: 
          description: URI referring to a resource
          type: string
          format: uri
          example: '/mecSerMgmtApi/example'
    SubscriptionLinkList:
      description: >-
        This type represents a list of links related to currently existing
        subscriptions for a MEC application instance. This information
        is returned when sending a request to receive current subscriptions.
      type: object
      required:
        - _links
      properties:
        _links:
          description: Self-referring URI.
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/LinkType'
            subscriptions:
              description: The MEC application instance's subscriptions
              type: array
              items:
                description: A link to a subscription.
                type: object
                required:
                  - href
                  - subscriptionType
                properties:
                  href:
                    description: URI referring to a resource
                    type: string
                    format: uri
                  subscriptionType:
                    description: >-
                      Type of the subscription. The values are as defined in
                      the "subscriptionType" attribute for each different Mp1
                      event subscription data type.
                    type: string
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: >-
            A URI reference according to IETF RFC 3986 that identifies the problem
            type
        title:
          type: string
          description: 'A short, human-readable summary of the problem type'
        status:
          type: integer
          format: uint32
          description: The HTTP status code for this occurrence of the problem
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem
    GrantType:
      description: OAuth 2.0 grant type
      type: string
      enum:
        - OAUTH2_AUTHORIZATION_CODE
        - OAUTH2_IMPLICIT_GRANT
        - OAUTH2_RESOURCE_OWNER
        - OAUTH2_CLIENT_CREDENTIALS
      example: 'OAUTH2_CLIENT_CREDENTIALS'
    OAuth2Info:
      description: Parameters related to use of OAuth 2.0
      required:
        - grantTypes
        - tokenEndpoint
      properties:
        grantTypes:
          description: >-
            List of supported OAuth 2.0 grant types.
          type: array
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/GrantType'
        tokenEndpoint:
          description: The token endpoint
          type: string
          format: uri
    SecurityInfo:
      description: This type represents security information related to a transport
      type: object
      properties:
        oAuth2Info:
          $ref: '#/components/schemas/OAuth2Info'
    Self:
      description: Self-referring URI.
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/LinkType'
      readOnly: true
    SerAvailabilityNotificationSubscription:
      description: >-
        This type represents a subscription to the notifications from the 
        MEC platform regarding the availability of a MEC service or a
        list of MEC services.
      type: object
      required:
        - subscriptionType
        - callbackReference
      properties:
        subscriptionType:
          description: Shall be set to SerAvailabilityNotificationSubscription.
          type: string
        callbackReference:
          description: >-
            URI selected by the MEC application instance to receive
            notifications on the subscribed MEC service availability
            information. This shall be included in both the request and the
            response.
          type: string
          format: uri
        _links:
          $ref: '#/components/schemas/Self'
        filteringCriteria:
          description: >-
            Filtering criteria to match services for which events are requested to be reported.
            If absent, matches all services. All child attributes are combined with the logical 
            "AND" operation.
          type: object
          not:
            required: [serInstanceIds, serNames, serCategories]
          properties:
            serInstanceIds:
              $ref: '#/components/schemas/SerInstanceIds'
            serNames:
              $ref: '#/components/schemas/SerNames'
            serCategories:
              $ref: '#/components/schemas/CategoryRefs'
            states:
              $ref: '#/components/schemas/ServiceStates'
            isLocal: 
              description: >-
                Indicate whether the service is located in the same locality (as defined
                by scopeOfLocality) as the consuming MEC application.
              type: boolean
    ServiceAvailabilityNotification:
      description: >-
        This type represents the service availability information.
      type: object
      required:
        - notificationType
        - serviceReferences
        - _links
      properties:
        notificationType:
          description: Shall be set to SerAvailabilityNotification.
          type: string
        serviceReferences:
          type: array
          items: 
            description: List of links to services whose availability has changed.
            type: object
            required:
              - serName
              - serInstanceId
              - state
              - changeType
            properties:
              link: 
                $ref: '#/components/schemas/LinkType'
              serName: 
                $ref: '#/components/schemas/SerName'
              serInstanceId:
                $ref: '#/components/schemas/SerInstanceId'
              state:
                $ref: '#/components/schemas/ServiceState'
              changeType:
                description: >-
                 Type of the change. Valid values:
                  ADDED: The service was newly added.
                   REMOVED: The service was removed.
                   STATE_CHANGED: Only the state of the service was changed. 
                   ATTRIBUTES_CHANGED: At least one attribute of the service other than state was changed. The change may or may not include changing the state.
                type: string
                enum:
                  - ADDED
                  - REMOVED
                  - STATE_CHANGED
                  - ATTRIBUTES_CHANGED
        _links:
          $ref: '#/components/schemas/Subscription'
    SerializerType:
      description: The enumeration  represents types of serializers
      type: string
      enum:
        - JSON
        - XML
        - PROTOBUF3
    LocalityType:
      description: The scope of locality as expressed by "consumedLocalOnly" and "isLocal". If absent, defaults to MEC_HOST
      type: string
      enum:
        - MEC_SYSTEM
        - MEC_HOST
        - NFVI_POP
        - ZONE
        - ZONE_GROUP
        - NFVI_NODE
    ServiceState:
      description: This enumeration defines the possible states of a service.
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    ServiceStates:
      description: >-
        States of the services about which to report events. If the event is 
        a state change, this filter represents the state after the change.
      type: array
      minItems: 0
      items:
        $ref: '#/components/schemas/ServiceState'
    SerInstanceId:
      description: >-
        Identifier of the service instance assigned by the MEC platform.
      type: string
      readOnly: true
    SerInstanceIds:
      description: Identifiers of service instances about which to report events.
      type: array
      minItems: 0
      items:
        $ref: '#/components/schemas/SerInstanceId'
    SerName:
      description: >-
        The name of the service. This is how the service producing MEC
        application identifies the service instance it produces.
      type: string
    SerNames:
      description: Names of services about which to report events.
      type: array
      minItems: 0
      items:
        $ref: '#/components/schemas/SerName'
    ServiceInfoPost:
      description: This type represents the general information of a MEC service.
      type: object
      required:
        - serName
        - version
        - state
        - serializer
      oneOf:
        - required: [transportId]
        - required: [transportInfo]
      properties:
        serInstanceId:
          $ref: '#/components/schemas/SerInstanceId'
        serName:
          $ref: '#/components/schemas/SerName'
        serCategory:
          $ref: '#/components/schemas/CategoryRef'
        version:
          description: Service version
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
        transportId:
          description: >-
            Identifier of the platform-provided transport to be used by the service.
            Valid identifiers may be obtained using the "Transport information
            query" procedure. May be present in POST requests to signal the use of a
            platform-provided transport for the service, and shall be absent
            otherwise.
          type: string
          writeOnly: true
        transportInfo:
          $ref: '#/components/schemas/TransportInfo'
        serializer:
          $ref: '#/components/schemas/SerializerType'
        scopeOfLocality:
          $ref: '#/components/schemas/LocalityType'
        consumedLocalOnly:
          description: >-
            Indicate whether the service can only be consumed by the MEC applications
            located in the same locality (as defined by scopeOfLocality) as this 
            service instance.
          type: boolean
        isLocal:
          description: >-
            Indicate whether the service is located in the same locality (as defined
            by scopeOfLocality) as the consuming MEC application.
          type: boolean
    ServiceInfo:
      description: This type represents the general information of a MEC service.
      type: object
      required:
        - serName
        - version
        - state
        - transportInfo
        - serializer
      properties:
        serInstanceId:
          $ref: '#/components/schemas/SerInstanceId'
        serName:
          $ref: '#/components/schemas/SerName'
        serCategory:
          $ref: '#/components/schemas/CategoryRef'
        version:
          description: Service version
          type: string
        state:
          $ref: '#/components/schemas/ServiceState'
        transportInfo:
          $ref: '#/components/schemas/TransportInfo'
        serializer:
          $ref: '#/components/schemas/SerializerType'
        scopeOfLocality:
          $ref: '#/components/schemas/LocalityType'
        consumedLocalOnly:
          description: >-
            Indicate whether the service can only be consumed by the MEC applications
            located in the same locality (as defined by scopeOfLocality) as this 
            service instance.
          type: boolean
        isLocal: 
          description: >-
            Indicate whether the service is located in the same locality (as defined
            by scopeOfLocality) as the consuming MEC application.
          type: boolean
      example:
        serInstanceId: 'rnisInstance1'
        serName: 'myRnis'
        serCategory:
          href: 'catItem1'
          id: 'id12345'
          name: 'RNI'
          version: 'v2'
        version: '2.2.1'
        state: 'ACTIVE'
        transportInfo:
          id: 'TransId12345'
          name: 'REST'
          description: 'REST API'
          type: 'REST_HTTP'
          protocol: 'HTTP'
          version: '2.0'
          endpoint:
            uris:
              - 'https://my.callback.com/sandboxname/rni/v2/'
        serializer: 'JSON'
        scopeOfLocality: 'MEC_SYSTEM'
    Subscription:
      description: A link to the related subscription
      type: object
      required:
        - subscription
      properties:
        subscription:
          $ref: '#/components/schemas/LinkType'
    TransportInfo:
      description: This type represents the general information of a MEC service.
      type: object
      required:
        - id
        - name
        - type
        - protocol
        - version
        - endpoint
        - security
      properties:
        id:
          description: The identifier of this transport
          type: string
        name:
          description: The name of this transport
          type: string
        description:
          description: Human-readable description of this transport
          type: string
        type:
          $ref: '#/components/schemas/TransportType'
        protocol:
          description: The name of the protocol used. Shall be set to HTTP for a REST API.
          type: string
        version:
          description: The version of the protocol used
          type: string
        endpoint:
          description: This type represents information about a transport endpoint
          type: object
          oneOf:
            - $ref: '#/components/schemas/EndPointInfoUris'
            - $ref: '#/components/schemas/EndPointInfoAddresses'
            - $ref: '#/components/schemas/EndPointInfoAlternative'
        security:
          $ref: '#/components/schemas/SecurityInfo'
        implSpecificInfo:
          description: Additional implementation specific details of the transport
          type: object
    TransportType:
      description: The enumeration TransportType represents types of transports
      type: string
      enum:
        - REST_HTTP
        - MB_TOPIC_BASED
        - MB_ROUTING
        - MB_PUBSUB
        - RPC
        - RPC_STREAMING
        - WEBSOCKET
  parameters:
    Path.AppInstanceId:
      name: appInstanceId
      description: >-
        Represents a MEC application instance. Note that the
        appInstanceId is allocated by the MEC platform manager.
      in: path
      required: true
      schema:
        type: string
    Path.SubscriptionId:
      name: subscriptionId
      description: >-
        Represents a subscription to the notifications from the MEC
        platform.
      in: path
      required: true
      schema:
        type: string
    Path.ServiceId:
      name: serviceId
      description: Represents a MEC service instance.
      in: path
      required: true
      schema:
        type: string
    Query.SerCategoryId:
      name: ser_category_id
      description: >-
        A MEC application instance may use ser_category_id as an input
        parameter to query the availability of a list of MEC service
        instances in a serCategory. Either "ser_instance_id" or "ser_name" or
        "ser_category_id" or none of them shall be present.
      in: query
      required: false
      schema:
        type: string
    Query.SerInstanceId:
      name: ser_instance_id
      description: >-
        A MEC application instance may use multiple ser_instance_ids as
        an input parameter to query the availability of a list of MEC
        service instances. Either "ser_instance_id" or "ser_name" or
        "ser_category_id" or none of them shall be present.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    Query.SerName:
      name: ser_name
      description: >-
        A MEC application instance may use multiple ser_names as an
        input parameter to query the availability of a list of MEC
        service instances. Either "ser_instance_id" or "ser_name" or
        "ser_category_id" or none of them shall be present.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    Query.LocalityType:
      name: scope_of_locality
      description: >-
        A MEC application instance may use scope_of_locality as an input 
        parameter to query the availability of a list of MEC service instances 
        with a certain scope of locality.
      in: query
      required: false
      schema:
        type: string
    Query.IsLocal:
      name: is_local
      description: >-
        Indicate whether the service is located in the same locality (as 
        defined by scopeOfLocality) as the consuming MEC application.
      in: query
      required: false
      schema:
        type: boolean
    Query.ConsumedLocalOnly:
      name: consumed_local_only
      description: >-
        Indicate whether the service can only be consumed by the MEC 
        applications located in the same locality (as defined by 
        scopeOfLocality) as this service instance.
      in: query
      required: false
      schema:
        type: boolean
  responses:
    ApplicationsSubscriptions200:
      description: >-
        Upon success, a response body containing the list of links to the
        requested subscriptions is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionLinkList'
      links:
        getIndividualmecSerMgmtApiSubscriptionLinkList:
          $ref: '#/components/links/GetIndividualmecSerMgmtApiSubscriptionLinkList'
        delIndividualmecSerMgmtApiSubscriptionLinkList:
          $ref: '#/components/links/DelIndividualmecSerMgmtApiSubscriptionLinkList'
    ApplicationsSubscriptions201:
      description: >-
        Entity body in the request contains a subscription to the MEC
        service availability notifications that is to be created.
      headers:
        location:
          description: The resource URI of the created resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SerAvailabilityNotificationSubscription'
      links:
        getIndividualmecSerMgmtApiSubscription:
          $ref: '#/components/links/GetIndividualmecSerMgmtApiSubscription'
        delIndividualmecSerMgmtApiSubscription:
          $ref: '#/components/links/DelIndividualmecSerMgmtApiSubscription'
    ApplicationsSubscription200:
      description: >-
        Upon success, a response body containing the requested subscription
        is returned.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SerAvailabilityNotificationSubscription'
    Services200:
      description: >-
        It is used to indicate nonspecific success. The response body
        contains a representation of the resource.
      content:
        application/json:
          schema:
            type: array
            minItems: 0
            items:
              $ref: '#/components/schemas/ServiceInfo'
      links:
        getIndividualmecService:
          $ref: '#/components/links/GetIndividualmecService'
        putIndividualmecService:
          $ref: '#/components/links/PutIndividualmecService'
    Services201:
      description: >-
        Upon success, the HTTP response shall include a Location HTTP header
        that contains the resource URI of the created resource.
      headers:
        location:
          description: The resource URI of the created resource
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceInfo'
      links:
        getIndividualmecService:
          $ref: '#/components/links/GetIndividualmecService'
        putIndividualmecService:
          $ref: '#/components/links/PutIndividualmecService'
    ServicesServiceId200:
      description: >-
        It is used to indicate nonspecific success. The response body
        contains a representation of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceInfo'
    Transports200:
      description: >-
        It is used to indicate nonspecific success. The response body
        contains a representation of the resource.
      content:
        application/json:
          schema:
            type: array
            minItems: 0
            items:
              $ref: '#/components/schemas/TransportInfo'
      links:
        getTransportInfo:
          $ref: '#/components/links/GetTransportInfo'
    400:
      description: >-
        Bad Request.
        It is used to indicate that incorrect parameters were passed to the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    401:
      description: >-
        Unauthorized.
        It is used when the client did not submit the appropriate credentials.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    403:
      description: >-
        Forbidden.
        The operation is not allowed given the current status of the resource. 
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404:
      description: >-
        Not Found.
        It is used when a client provided a URI that cannot be mapped 
        to a valid resource URI.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    409:
      description: >- 
        Conflict.
        The operation cannot be executed currently, due to a conflict with 
        the state of the resource. Typically, this is because the application 
        instance resource is in NOT_INSTANTIATED state.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    412:
      description: >-
        Precondition Failed.
        It is used when a condition has failed during conditional requests, 
        e.g. when using ETags to avoid write conflicts.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    414:
      description: >-
        It is used to indicate that the server is refusing to process the request because the request URI is longer than the server is willing or able to process.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    429:
      description: >-
        Too Many Requests.
        It is used when a rate limiter has triggered.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  requestBodies:
    ApplicationsSubscriptions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SerAvailabilityNotificationSubscription'
          example:
            subscriptionType: 'SerAvailabilityNotificationSubscription'
            callbackReference: "http://my.callback.com/mec_service_mgmt_ser_availabilities/some-id"
            filteringCriteria:
              serNames:
                - 'myRnis'
              states:
                - 'ACTIVE'
                - 'INACTIVE'
              isLocal: true
      description: >-
        Entity body in the request contains a subscription to the MEC
        application termination notifications that is to be created.
      required: true
    Services:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceInfo'
      description: >-
        New ServiceInfo with updated "state" is included as entity body of the
        request
      required: true
    ServicesPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceInfoPost'
          example:
            serName: 'myRnis'
            serCategory:
              href: 'catItem1'
              id: 'id12345'
              name: 'RNI'
              version: 'v2'
            version: '2.2.1'
            state: 'ACTIVE'
            transportInfo:
              id: 'TransId12345'
              name: 'REST'
              description: 'REST API'
              type: 'REST_HTTP'
              protocol: 'HTTP'
              version: '2.0'
              endpoint:
                uris:
                  - 'https://my.callback.com/sandboxname/rni/v2/'
            serializer: 'JSON'
            scopeOfLocality: 'MEC_SYSTEM'
      description: >-
        New ServiceInfo with updated "state" is included as entity body of the
        request
      required: true
    ServicesServiceId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceInfo'
      description: >-
        New ServiceInfo with updated "state" is included as entity body of the
        request
      required: true
    ServiceAvailabilityNotification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceAvailabilityNotification'
      required: true
  callbacks:
    ServiceAvailabilityNotification:
      '{$request.body#/callbackReference}':
        post:
          description: >-
            'Represents the service availability information that 
            is used in the following cases
            - when the MEC platform announces the newly available
             services to the authorized relevant MEC applications (e.g. 
             the applications that indicate the services as "optional" 
             or "required") that are subscribed to the corresponding 
             service availability notifications
            -  when the MEC platform notifies the authorized relevant 
            applications that are subscribed to the corresponding 
            service availability notifications about the service availability changes.'
          operationId: Sm_ServiceAvailabilityNotification_POST
          tags:
            - callbacks
          requestBody:
            $ref: '#/components/requestBodies/ServiceAvailabilityNotification'
          responses:
            '200':
              description: Expected responses from callback consumer, if it accepts the callback
  links:
    GetIndividualmecService:
      operationId: Sm_ServicesServiceId_GET
      description: The `serviceId` value returned in the response can be used as the `serviceId` parameter in `GET /services/{serviceId}`
      parameters:
        serviceId: '$response.body#/serviceId'
    PutIndividualmecService:
      operationId: Sm_ServicesServiceId_PUT
      description: The `serviceId` value returned in the response can be used as the `serviceId` parameter in `PUT /services/{serviceId}`
      parameters:
        serviceId: '$response.body#/serviceId'
    GetTransportInfo:
      operationId: Sm_AppServices_POST
      description: The `id` value returned in the response can be used as the `transportId` parameter in `POST /applications/{appInstanceId}/services`. The first transport is provided as the link as wildcards are not supported
      parameters:
        transportId: '$response.body#/0/id'
    GetIndividualmecSerMgmtApiSubscription:
      operationId: Sm_ApplicationsSubscription_GET
      description: The `subscriptionId` value returned in the response can be used as the `subscriptionId` parameter in `GET /applications/{appInstanceId}/subscriptions/{subscriptionId}`
      parameters:
        description: regex = \/mec_service_mgmt\/v1\/applications\/.*\/subscriptions\/.*\/(.*);subscriptionId = href.match(regex)[1];// where "href" is an attribute within the subscription attribute within the _links attribute
        subscriptionId: 'TBC'
    DelIndividualmecSerMgmtApiSubscription:
      operationId: Sm_ApplicationsSubscription_DELETE
      description: The `subscriptionId` value returned in the response can be used as the `subscriptionId` parameter in `DELETE /applications/{appInstanceId}/subscriptions/{subscriptionId}`
      parameters:
        description: regex = \/mec_service_mgmt\/v1\/applications\/.*\/subscriptions\/(.*);subscriptionId = href.match(regex)[1];// where "href" is an attribute within the subscription attribute within the _links attribute
        subscriptionId: 'TBC'
    GetIndividualmecSerMgmtApiSubscriptionLinkList:
      operationId: Sm_ApplicationsSubscription_GET
      description: The `subscriptionId` value returned in the response can be used as the `subscriptionId` parameter in `GET /applications/{appInstanceId}/subscriptions/{subscriptionId}`
      parameters:
        description: regex = \/mec_service_mgmt\/v1\/applications\/.*\/subscriptions\/(.*);subscriptionId = href.match(regex)[1];// where "href" is an attribute within the subscription attribute within the _links attribute
        subscriptionId: 'TBC'
    DelIndividualmecSerMgmtApiSubscriptionLinkList:
      operationId: Sm_ApplicationsSubscription_DELETE
      description: The `subscriptionId` value returned in the response can be used as the `subscriptionId` parameter in `DELETE /applications/{appInstanceId}/subscriptions/{subscriptionId}`
      parameters:
        description: regex = \/mec_service_mgmt\/v1\/applications\/.*\/subscriptions\/(.*);subscriptionId = href.match(regex)[1];// where "href" is an attribute within the subscription attribute within the _links attribute
        subscriptionId: 'TBC'
  examples:
    ServiceInfo:
      value:
        serInstanceId: 'rnisInstance1'
        serName: 'myRnis'
        serCategory:
          href: 'catItem1'
          id: 'id12345'
          name: 'RNI'
          version: 'v2'
        version: '2.2.1'
        state: 'ACTIVE'
        transportInfo:
          id: 'TransId12345'
          name: 'REST'
          description: 'REST API'
          type: 'REST_HTTP'
          protocol: 'HTTP'
          version: '2.0'
          endpoint:
            uris:
              - 'https://my.callback.com/sandboxname/rni/v2/'
        serializer: 'JSON'
        scopeOfLocality: 'MEC_SYSTEM'


